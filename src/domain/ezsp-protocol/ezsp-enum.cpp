/**
 * 
 */
#include <map>

#include "ezsp-enum.h"

std::string CEzspEnum::EmberNodeTypeToString( EmberNodeType in )
{
    const std::map<EmberNodeType,std::string> MyEnumStrings {
        { EMBER_UNKNOWN_DEVICE, "EMBER_UNKNOWN_DEVICE" },
        { EMBER_COORDINATOR, "EMBER_COORDINATOR" },
        { EMBER_ROUTER, "EMBER_ROUTER" },
        { EMBER_END_DEVICE, "EMBER_END_DEVICE" },
        { EMBER_SLEEPY_END_DEVICE, "EMBER_SLEEPY_END_DEVICE" },
    };
    auto   it  = MyEnumStrings.find(in);
    return it == MyEnumStrings.end() ? "OUT_OF_RANGE" : it->second;   
}

std::string CEzspEnum::EEmberStatusToString( EEmberStatus in )
{
    const std::map<EEmberStatus,std::string> MyEnumStrings {
        { EMBER_SUCCESS, "EMBER_SUCCESS" },
        { EMBER_ERR_FATAL, "EMBER_ERR_FATAL" },
        { EMBER_NO_BUFFERS, "EMBER_NO_BUFFERS" },
        { EMBER_MAC_NO_DATA, "EMBER_MAC_NO_DATA" },
        { EMBER_MAC_INVALID_CHANNEL_MASK, "EMBER_MAC_INVALID_CHANNEL_MASK" },
        { EMBER_MAC_SCANNING, "EMBER_MAC_SCANNING" },
        { EMBER_MAC_NO_ACK_RECEIVED, "EMBER_MAC_NO_ACK_RECEIVED" },
        { EMBER_DELIVERY_FAILED, "EMBER_DELIVERY_FAILED" },
        { EMBER_INVALID_CALL, "EMBER_INVALID_CALL" },
        { EMBER_MAX_MESSAGE_LIMIT_REACHED, "EMBER_MAX_MESSAGE_LIMIT_REACHED" },
        { EMBER_ADDRESS_TABLE_ENTRY_IS_ACTIVE, "EMBER_ADDRESS_TABLE_ENTRY_IS_ACTIVE" },
        { EMBER_NETWORK_UP, "EMBER_NETWORK_UP" },
        { EMBER_NETWORK_DOWN, "EMBER_NETWORK_DOWN" },
        { EMBER_NOT_JOINED, "EMBER_NOT_JOINED" },
        { EMBER_JOIN_FAILED, "EMBER_JOIN_FAILED" },
        { EMBER_MOVE_FAILED, "EMBER_MOVE_FAILED" },
        { EMBER_NETWORK_BUSY, "EMBER_NETWORK_BUSY" },
        { EMBER_NO_BEACONS, "EMBER_NO_BEACONS" },
        { EMBER_RECEIVED_KEY_IN_THE_CLEAR, "EMBER_RECEIVED_KEY_IN_THE_CLEAR" },
        { EMBER_NO_NETWORK_KEY_RECEIVED, "EMBER_NO_NETWORK_KEY_RECEIVED" }
    };
    auto   it  = MyEnumStrings.find(in);
    return it == MyEnumStrings.end() ? "OUT_OF_RANGE" : it->second;      
}

std::string CEzspEnum::EmberJoinMethodToString( EmberJoinMethod in )
{
    const std::map<EmberJoinMethod,std::string> MyEnumStrings {
        { EMBER_USE_MAC_ASSOCIATION, "EMBER_USE_MAC_ASSOCIATION" },
        { EMBER_USE_NWK_REJOIN, "EMBER_USE_NWK_REJOIN" },
        { EMBER_USE_NWK_REJOIN_HAVE_NWK_KEY, "EMBER_USE_NWK_REJOIN_HAVE_NWK_KEY" },
        { EMBER_USE_NWK_COMMISSIONING, "EMBER_USE_NWK_COMMISSIONING" }
    };
    auto   it  = MyEnumStrings.find(in);
    return it == MyEnumStrings.end() ? "OUT_OF_RANGE" : it->second;    
}

std::string CEzspEnum::EEzspCmdToString( EEzspCmd in )
{
    const std::map<EEzspCmd,std::string> MyEnumStrings {
        { EZSP_VERSION, "EZSP_VERSION" },
        { EZSP_GET_CONFIGURATION_VALUE, "EZSP_GET_CONFIGURATION_VALUE" },
        { EZSP_SET_CONFIGURATION_VALUE, "EZSP_SET_CONFIGURATION_VALUE" },
        { EZSP_ADD_ENDPOINT, "EZSP_ADD_ENDPOINT" },
        { EZSP_SET_POLICY, "EZSP_SET_POLICY" },
        { EZSP_GET_POLICY, "EZSP_GET_POLICY" },
        { EZSP_GET_VALUE, "EZSP_GET_VALUE" },
        { EZSP_SET_VALUE, "EZSP_SET_VALUE" },
        { EZSP_NOP, "EZSP_NOP" },
        { EZSP_TIMER_HANDLER, "EZSP_TIMER_HANDLER" },
        { EZSP_DEBUG_HANDLER, "EZSP_DEBUG_HANDLER" },
        { EZSP_STACK_STATUS_HANDLER, "EZSP_STACK_STATUS_HANDLER" },
        { EZSP_ENERGY_SCAN_RESULT_HANDLER, "EZSP_ENERGY_SCAN_RESULT_HANDLER" },
        { EZSP_NETWORK_FOUND_HANDLER, "EZSP_NETWORK_FOUND_HANDLER" },
        { EZSP_SCAN_COMPLETE_HANDLER, "EZSP_SCAN_COMPLETE_HANDLER" },
        { EZSP_CHILD_JOIN_HANDLER, "EZSP_CHILD_JOIN_HANDLER" },
        { EZSP_REMOTE_SET_BINDING_HANDLER, "EZSP_REMOTE_SET_BINDING_HANDLER" },
        { EZSP_REMOTE_DELETE_BINDING_HANDLER, "EZSP_REMOTE_DELETE_BINDING_HANDLER" },
        { EZSP_MESSAGE_SENT_HANDLER, "EZSP_MESSAGE_SENT_HANDLER" },
        { EZSP_POLL_COMPLETE_HANDLER, "EZSP_POLL_COMPLETE_HANDLER" },
        { EZSP_POLL_HANDLER, "EZSP_POLL_HANDLER" },
        { EZSP_INCOMING_SENDER_EUI64_HANDLER, "EZSP_INCOMING_SENDER_EUI64_HANDLER" },
        { EZSP_INCOMING_MESSAGE_HANDLER, "EZSP_INCOMING_MESSAGE_HANDLER" },
        { EZSP_INCOMING_ROUTE_RECORD_HANDLER, "EZSP_INCOMING_ROUTE_RECORD_HANDLER" },
        { EZSP_INCOMING_MANY_TO_ONE_ROUTE_REQUEST_HANDLER, "EZSP_INCOMING_MANY_TO_ONE_ROUTE_REQUEST_HANDLER" },
        { EZSP_INCOMING_ROUTE_ERROR_HANDLER, "EZSP_INCOMING_ROUTE_ERROR_HANDLER" },
        { EZSP_ID_CONFLICT_HANDLER, "EZSP_ID_CONFLICT_HANDLER" },
        { EZSP_MAC_PASSTHROUGH_MESSAGE_HANDLER, "EZSP_MAC_PASSTHROUGH_MESSAGE_HANDLER" },
        { EZSP_MAC_FILTER_MATCH_MESSAGE_HANDLER, "EZSP_MAC_FILTER_MATCH_MESSAGE_HANDLER" },
        { EZSP_RAW_TRANSMIT_COMPLETE_HANDLER, "EZSP_RAW_TRANSMIT_COMPLETE_HANDLER" },
        { EZSP_SWITCH_NETWORK_KEY_HANDLER, "EZSP_SWITCH_NETWORK_KEY_HANDLER" },
        { EZSP_ZIGBEE_KEY_ESTABLISHMENT_HANDLER, "EZSP_ZIGBEE_KEY_ESTABLISHMENT_HANDLER" },
        { EZSP_TRUST_CENTER_JOIN_HANDLER, "EZSP_TRUST_CENTER_JOIN_HANDLER" },
        { EZSP_GENERATE_CBKE_KEYS_HANDLER, "EZSP_GENERATE_CBKE_KEYS_HANDLER" },
        { EZSP_CALCULATE_SMACS_HANDLER, "EZSP_CALCULATE_SMACS_HANDLER" },
        { EZSP_DSA_SIGN_HANDLER, "EZSP_DSA_SIGN_HANDLER" },
        { EZSP_DSA_VERIFY_HANDLER, "EZSP_DSA_VERIFY_HANDLER" },
        { EZSP_MFGLIB_RX_HANDLER, "EZSP_MFGLIB_RX_HANDLER" },
        { EZSP_INCOMING_BOOTLOAD_MESSAGE_HANDLER, "EZSP_INCOMING_BOOTLOAD_MESSAGE_HANDLER" },
        { EZSP_BOOTLOAD_TRANSMIT_COMPLETE_HANDLER, "EZSP_BOOTLOAD_TRANSMIT_COMPLETE_HANDLER" },
    };
    auto   it  = MyEnumStrings.find(in);
    return it == MyEnumStrings.end() ? "OUT_OF_RANGE" : it->second;    
}

std::string CEzspEnum::EmberKeyTypeToString( EmberKeyType in )
{
    const std::map<EmberKeyType,std::string> MyEnumStrings {
        { EMBER_TRUST_CENTER_LINK_KEY, "EMBER_TRUST_CENTER_LINK_KEY" },
        { EMBER_CURRENT_NETWORK_KEY, "EMBER_CURRENT_NETWORK_KEY" },
        { EMBER_NEXT_NETWORK_KEY, "EMBER_NEXT_NETWORK_KEY" },
        { EMBER_APPLICATION_LINK_KEY, "EMBER_APPLICATION_LINK_KEY" }
    };
    auto   it  = MyEnumStrings.find(in);
    return it == MyEnumStrings.end() ? "OUT_OF_RANGE" : it->second;    
}


std::string CEzspEnum::EmberIncomingMessageTypeToString( EmberIncomingMessageType in )
{
    const std::map<EmberIncomingMessageType,std::string> MyEnumStrings {
        { EMBER_INCOMING_UNICAST, "EMBER_INCOMING_UNICAST" },
        { EMBER_INCOMING_UNICAST_REPLY, "EMBER_INCOMING_UNICAST_REPLY" },
        { EMBER_INCOMING_MULTICAST, "EMBER_INCOMING_MULTICAST" },
        { EMBER_INCOMING_MULTICAST_LOOPBACK, "EMBER_INCOMING_MULTICAST_LOOPBACK" },
        { EMBER_INCOMING_BROADCAST, "EMBER_INCOMING_BROADCAST" },
        { EMBER_INCOMING_BROADCAST_LOOPBACK, "EMBER_INCOMING_BROADCAST_LOOPBACK" },
        { EMBER_INCOMING_MANY_TO_ONE_ROUTE_REQUEST, "EMBER_INCOMING_MANY_TO_ONE_ROUTE_REQUEST" }
    };
    auto   it  = MyEnumStrings.find(in);
    return it == MyEnumStrings.end() ? "OUT_OF_RANGE" : it->second;      
}
